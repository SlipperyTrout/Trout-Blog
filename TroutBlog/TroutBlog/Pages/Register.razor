@page "/Register"

<div class="container">
    <EditForm Model="@newUser" OnSubmit="@HandleSubmitRegistration">
        <DataAnnotationsValidator/>
        <br>
        <div class="mb-2 d-flex justify-content-center">
            <h2>Register</h2>
        </div>
        <div class="mb-2 d-flex flex-column align-items-center">
            <InputText @bind-Value="newUser.Username" type="username" class="login-textbox" placeholder="Username" />
            <ValidationMessage For="() => newUser.Username" />
        </div>
        <div class="mb-2 d-flex flex-column align-items-center">
            <InputText @bind-Value="newUser.Email" type="email" class="login-textbox" placeholder="Email" />
            <ValidationMessage For="() => newUser.Email" />
        </div>
        <div class="mb-2 d-flex flex-column align-items-center">
            <InputText @bind-Value="newUser.Password" type="password" class="login-textbox" placeholder="Password" AutoComplete="false" />
            <ValidationMessage For="() => newUser.Password" />
        </div>
        <div>
            <p class="d-flex justify-content-center">Already have an account?&nbsp;<a href="/login" class="link-primary">Login</a></p>
        </div>
        <div class="d-flex justify-content-center">
            <button type="submit" class="login-button">Register</button>
        </div>
    </EditForm>
</div>

@using Data.Entities
@using TroutBlog.Data;
@inject IConfiguration Configuration;
@code{
    private AppDBContext _context;

    protected override async Task OnInitializedAsync()
    {
        _context = new AppDBContext(Configuration);
    }

    private User newUser = new User();

    private void HandleSubmitRegistration()
    {
        if (_context.Users.Any(u => u.Username == newUser.Username))
        {
            
        }
    }
}
